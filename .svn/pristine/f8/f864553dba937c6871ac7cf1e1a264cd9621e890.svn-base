/*
 * Nwoke Fortune Chiemeziem. Winter 2015.
 */

package view;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.geom.Rectangle2D;
import java.util.ArrayList;
import java.util.List;
import java.util.Observable;
import java.util.Observer;

import javax.swing.JPanel;

import model.Board;
import model.Board.BoardData;
import model.Board.CompletedLines;
import model.Board.GameStatus;
import model.Point;
import model.TetrisPiece;

/**
 * This panel controls the game board.
 * 
 * @author n4tunec@uw.edu.
 * @version winter 2015.
 *
 */
public class BoardPanel extends JPanel implements Observer {

    /** The board panel serial version id. */
    private static final long serialVersionUID = 1L;

    /** The tetris piece size. */
    private static final int TETRIS_SIZE = 20;

    /** The piece point relative to its container.. */
    private static final int PIECE_TO_PANEL_RATIO = 3;

    /** The game over label font size. */
    private static final int FONT_SIZE = 16;

    /** The board X dimension. */
    private static final int BOARD_X = 14;

    /** The board Y dimension. */
    private static final int BOARD_Y = 30;
    
    /**The completed lines object.*/
    private CompletedLines myCompletedLines;

    /** The game board. */
    private final Board myBoard;
    /** The game board data. */
    private BoardData myBoardData;

    /** The color data. */
    private List<Color[]> myColorData;

    /** The next tetris piece to be displayed. */
    private TetrisPiece myNextPiece;

    /** The present game status. */
    private GameStatus myGameStatus;
    
    /**Number of clear lines.*/
    private int clearCount;
    /** Keeps track of the pause of the game.*/
    private boolean myPause;

    /**
     * Default constructor initializes the fields.
     */
    public BoardPanel() {
        super();
        setBackground(Color.BLACK);
        myNextPiece = TetrisPiece.getRandomPiece();

        myBoard = new Board(BOARD_X, BOARD_Y);
        myBoard.addObserver(this);
        myColorData = new ArrayList<>();
        
        myBoard.clear();
    }

    /**
     * Paints the Blocks on the panel.
     * 
     * @param theGraphics this graphics o=drawing objects.
     */
    @Override
    public void paintComponent(final Graphics theGraphics) {

        super.paintComponent(theGraphics);
        final Graphics2D g2d = (Graphics2D) theGraphics;

        // for better graphics display
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                             RenderingHints.VALUE_ANTIALIAS_ON);

        for (int i = 0; i < myColorData.size(); i++) {
            final Color[] colorRow = myColorData.get(i);
            for (int j = 0; j < colorRow.length; j++) {
                final Color newColor = colorRow[j];
                g2d.setColor(newColor);

                final Point currentPoint = new Point(j * TETRIS_SIZE, i * TETRIS_SIZE);

                if (newColor != null) {
                    g2d.setFont(new Font("Comic Sans ms", Font.BOLD, FONT_SIZE));
                    if (myGameStatus.isGameOver()) {
                        
                        g2d.setColor(Color.WHITE);
                        g2d.drawString("Game Over", getWidth() / PIECE_TO_PANEL_RATIO,
                                       getHeight() / PIECE_TO_PANEL_RATIO);
                        //setBackground(Color.BLACK);
                    } else if (myPause) {
                        System.out.println(myPause);
                       // g2d.setFont(new Font("Comic Sans ms", Font.BOLD, FONT_SIZE));
                        g2d.setColor(Color.WHITE);
                        g2d.drawString("Game Paused", getWidth() / PIECE_TO_PANEL_RATIO,
                                       getHeight() / PIECE_TO_PANEL_RATIO);
                        //setBackground(Color.BLACK);
                    } else {
                        g2d.fill(new Rectangle2D.Double(currentPoint.x(), getHeight()
                                                                          - currentPoint.y()
                                                                          - TETRIS_SIZE,
                                                        TETRIS_SIZE, TETRIS_SIZE));
                    }
                }
            }
        }
    }

    @Override
    public void update(final Observable theObservable, final Object theObject) {

        if (theObservable instanceof Board) {
            if (theObject instanceof BoardData) {

                myBoardData = (BoardData) theObject;
                myColorData = myBoardData.getBoardData();
              
                repaint();
            } else if (theObject instanceof TetrisPiece) {
                myNextPiece = (TetrisPiece) theObject;
                
            } else if (theObject instanceof GameStatus) {
                myGameStatus = (GameStatus) theObject;

            } else if (theObject instanceof CompletedLines) {
                myCompletedLines = (CompletedLines) theObject;
                clearCount++;
            }
        }
    }

    /** Querry for the number of completed lines.
     * @return the number of cleared lines.*/
    public int getCompletedLines() {
        return clearCount;
    }
    /**
     * This lets the next piece panel know 
     * that some thing has changed in the board.
     */
    public void fireChangeListsner() {
        firePropertyChange("board", myBoard, myNextPiece);
    }
    
    /**
     * The returns the next tetris piece to be displayed.
     * @return the Next tetris piece.
     */
    public TetrisPiece getNextPanelPiece() {
        return myNextPiece;
    }

    /**
     * The returns the next tetris piece color.
     * @return the Next tetris piece color.
     */
    public Color getNextPieceColor() {
        return myNextPiece.getColor();
    }

    /** This moves the object with the timer.*/
    public void moveObjects() {
        myBoard.step();
    }

    /** Moves the piece to the right.*/
    public void moveRight() {
        myBoard.right();
    }

    /** Moves the piece to the left.*/
    public void moveLeft() {
        myBoard.left();
    }

    /** Moves the piece to the down.*/
    public void moveDown() {
        myBoard.down();
    }

    /** Moves the piece to the down.*/
    public void drop() {
        myBoard.drop();
    }

    /** Rotates the piece CCW.*/
    public void moveRotateLeft() {
        myBoard.rotateCCW();
    }

    /** Rotates the piece CW.*/
    public void moveRotateRight() {
        myBoard.rotateCW();
    }
    /** Pauses the game. */
    public void pause() {
        myPause ^= true;
        repaint();
    }
    /** Restarts a new game.*/
    public void restart() {
        myBoard.clear();
        clearCount = 0;
    }
}
