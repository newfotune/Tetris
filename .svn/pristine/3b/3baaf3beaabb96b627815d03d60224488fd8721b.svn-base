/*
 * Nwoke Fortune Chiemeziem Winter 2015.
 */

package view;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

import javax.swing.AbstractAction;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.Timer;

/**
 * The main frame of the game.
 * 
 * @author n4tunec@uw.edu.
 * @version winter 2015
 *
 */
public class GameFrame {
    /** The dimension of my frame. */
    private static final Dimension MY_FRAME_SIZE = new Dimension(500, 600);

    /** The dimension of my frame. */
    private static final Dimension MY_GAMEPANEL_SIZE = new Dimension(280, 600);

    /** The dimension of my information panel. */
    private static final Dimension MY_INFOPANEL_SIZE = new Dimension(200, 550);

    /** The Timer pause. */
    private static final int PAUSE = 500;

    /** The main frame. */
    private final JFrame myFrame;

    /** The game panel. */
    private final BoardPanel myPanel;

    /** The informations panel. */
    private final JPanel myInfoPanel;

    /** The nextPiece Panel. */
    private final NextPiecePanel myNextPiecePanel;

    /** The game Timer. */
    private final Timer myTimer;

    /** The Statistics PAnel. */
    private final StatisticsPanel myStatsPanel;

    private int myNewLevelScore;
    private int myLevel;
    
    /**
     * Constructor initializes all fields.
     */
    public GameFrame() {

        // set up frame
        myFrame = new JFrame("Tetris");
        myFrame.setSize(MY_FRAME_SIZE);
        myFrame.setResizable(false);
        myFrame.setLocationRelativeTo(null);
        myFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        myNextPiecePanel = new NextPiecePanel();

        myTimer = new Timer(PAUSE, new TimerListener());

        // set up board panel
        myPanel = new BoardPanel();

        myInfoPanel = new JPanel();
        myStatsPanel = new StatisticsPanel();
        // setUpControlsDialog();
    }

    /**
     * This displays the game controls to the user before the game starts.
     */
    private void setUpControlsDialog() {
        // setUp controls Dialog
        JOptionPane.showMessageDialog(null,
                                      "Key ----- function\n"
                                                      + "'A' key - move left\n'D' key - move right\n"
                                                      + "'S' key - move down \n'SPACE' key - drop\n"
                                                      + "'LEFT' key - rotateCCW \n'RIGHT' key - rotateCW",
                                      "Game Controls", JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * Start loading up components of the GUI.
     */
    public void start() {

        myPanel.setPreferredSize(MY_GAMEPANEL_SIZE);
        myPanel.addPropertyChangeListener(myNextPiecePanel);

        myInfoPanel.setPreferredSize(MY_INFOPANEL_SIZE);
        myInfoPanel.setBackground(Color.GRAY);

        myInfoPanel.add(myNextPiecePanel);
        myInfoPanel.add(myStatsPanel);

        myFrame.addKeyListener(new KeyEventHandler());
        myFrame.add(myInfoPanel, BorderLayout.EAST);
        myFrame.add(myPanel, BorderLayout.WEST);
        myFrame.add(new JPanel());

        myFrame.setJMenuBar(createMenuBar());
        myFrame.setVisible(true);
        myTimer.start();
    }

    /**
     * 
     * @return
     */
    public JMenuBar createMenuBar() {
        final JMenuBar menuBar = new JMenuBar();

        JMenu fileMenu = new JMenu("File...");
        fileMenu.setMnemonic('F');
        fileMenu.add(new AbstractAction("New Game") {

            @Override
            public void actionPerformed(final ActionEvent theEvent) {
                myLevel =1;
                myNewLevelScore = 10;
                myPanel.restart();
            }

        });

        class Exit extends AbstractAction {

            /**
             * sets name of the action and sets it mnemonic value.
             * 
             * @param theName the name of the menuItem.
             */
            public Exit(final String theName) {
                super(theName);
                putValue(MNEMONIC_KEY, KeyEvent.VK_X);
            }

            /**
             * This closes down the JFrame.
             * @param theEvent the event thrown.
             */
            @Override
            public void actionPerformed(final ActionEvent theEvent) {
                myFrame.dispose();
            }
        }
        fileMenu.add(new Exit("Exit..."));

        menuBar.add(fileMenu);
        menuBar.add(createOptionsMenu());
        return menuBar;
    }

    /**
     * Creates the options menu on the menu bar.
     * 
     * @return the options menu.
     */
    public JMenu createOptionsMenu() {
        final JMenu options = new JMenu("Options...");
        final JCheckBoxMenuItem checkbox = new JCheckBoxMenuItem("Grid");
        checkbox.setMnemonic('G');
        checkbox.addActionListener(new ActionListener() {
            public void actionPerformed(final ActionEvent theEvent) {
                myPanel.setGridSelected(checkbox.isSelected());
                // myPanel.repaint();
            }
        });

        options.add(checkbox);
        return options;
    }

    /**
     * The panel displays the users game statistics.
     * 
     * @author n4tunec@uw.edu.
     * @version winter 2015.
     *
     */
    public class StatisticsPanel extends JPanel {

        /** The game over label font size. */
        private static final int FONT_SIZE = 16;

        /** The dimension of the nextPiece panel. */
        private final Dimension MY_SIZE = new Dimension(new Dimension(180, 200));

        /** Default constructor initializes the variables. */
        public StatisticsPanel() {
            super();
            setPreferredSize(MY_SIZE);
            setBackground(Color.CYAN);
            myNewLevelScore = 10;
        }

        /**
         * Paints the Blocks on the panel.
         * 
         * @param theGraphics this graphics o=drawing objects.
         */
        @Override
        public void paintComponent(final Graphics theGraphics) {

            super.paintComponent(theGraphics);
            final Graphics2D g2d = (Graphics2D) theGraphics;

            // for better graphics display
            g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                                 RenderingHints.VALUE_ANTIALIAS_ON);

            g2d.setFont(new Font("Comic Sans ms", Font.BOLD, FONT_SIZE));
            g2d.setColor(Color.WHITE);
            g2d.drawString(gameStats(), 0, 30);
            g2d.drawString("Level : " + getLevel(), 0, 60);
            g2d.drawString("Score : " + getScore(), 0, 90);

            setBackground(Color.BLACK);
        }

        public String gameStats() {

            final StringBuilder sb = new StringBuilder("Cleared Lined : ");
            
            sb.append(getCompletedLines());
            return sb.toString();
        }

        /**
         * Gets the numeber of lines cleared;
         * 
         * @return the completed lines in string format.
         */
        public String getCompletedLines() {

            return String.valueOf(myPanel.getCompletedLines());
        }

        public String getScore() {
            int score = myPanel.getCompletedLines() * 10;
            
            if (score >= myNewLevelScore) {
                if (myTimer.getDelay() <= 100) {
                    myTimer.setDelay(myTimer.getDelay()-100);
                    System.out.println(myTimer.getDelay());
                    myNewLevelScore += 10;
                    myLevel++;
                }
                //System.out.println(newLevelScore);
            }
            return String.valueOf(score);
        }

        public String getLevel() {
            return String.valueOf(myLevel);
        }
    }

    /**
     * An Action Listener for the timer.
     * 
     * @author n4tunec@uw.edu.
     * @version winter 2015.
     *
     */
    public class TimerListener implements ActionListener {
        /** Default constructor for the listener. */
        protected TimerListener() {
            // do nothing.
        }

        /**
         * This moves the object with the timer.
         * @param theEvent this is the event fired.
         */
        @Override
        public void actionPerformed(final ActionEvent theEvent) {

            myPanel.moveObjects();
            myPanel.fireChangeListsner();
            myStatsPanel.repaint();

        }
    }

    /**
     * This handles the key events from the user.
     * 
     * @author n4tunec@uw.edu
     * @version winter 2015.
     *
     */
    public class KeyEventHandler extends KeyAdapter {

        /**
         * Default constructor.
         */
        protected KeyEventHandler() {
            super();
            // do nothing
        }

        /**
         * Takes care of the board movement.
         * 
         * @param theEvent the key event.
         */
        @Override
        public void keyPressed(final KeyEvent theEvent) {
            switch (theEvent.getKeyCode()) {
                case KeyEvent.VK_D:
                    if (myTimer.isRunning()) {
                        myPanel.moveRight();
                    }

                    break;

                case KeyEvent.VK_A:

                    if (myTimer.isRunning()) {
                        myPanel.moveLeft();
                    }

                    break;

                case KeyEvent.VK_S:
                    if (myTimer.isRunning()) {
                        myPanel.moveDown();
                    }

                    break;

                case KeyEvent.VK_LEFT:
                    if (myTimer.isRunning()) {
                        myPanel.moveRotateLeft();
                    }

                    break;

                case KeyEvent.VK_RIGHT:
                    if (myTimer.isRunning()) {
                        myPanel.moveRotateRight();
                    }

                    break;

                case KeyEvent.VK_SPACE:
                    if (myTimer.isRunning()) {
                        myPanel.drop();
                    }
                    break;

                case KeyEvent.VK_P:
                    myPanel.pause();
                    if (myTimer.isRunning()) {
                        myTimer.stop();
                    }
                    else {
                        myTimer.start();
                    }

                    break;
                default:
                    break;
            }
        }
    }
}
